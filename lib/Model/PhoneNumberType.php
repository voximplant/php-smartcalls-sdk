<?php
/**
 * PhoneNumberType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Smartcalls
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* SmartCalls IO API Documentation
 *
* <h1>Basic description</h1> <p>HTTP API is available via the <u>https://smartcalls.io/api/v2/<b>{method}</b></u> endpoint. To use the methods marked with the LOCK symbol, you need to generate an access_token via the <b>getAccessToken</b> method. Pass this access token to each HTTP API call.</p> <h1>Authentication</h1> <p>This API uses Custom Query Parameter for its authentication.</p> <p>The parameters that are needed to be sent for this type of authentication are as follows:</p> <ul>   <li><strong>access_token</strong></li>   <li><strong>domain</strong></li> </ul>
 *
* OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.2
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Smartcalls\Model;

use \ArrayAccess;
use \Smartcalls\ObjectSerializer;

/**
 * PhoneNumberType Class Doc Comment
 *
 * @category Class
 * @package  Smartcalls
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PhoneNumberType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PhoneNumberType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'domain_id' => 'int',
'auto_charge' => 'bool',
'can_be_used' => 'bool',
'category_name' => 'string',
'phone_country_code' => 'string',
'phone_purchase_date' => 'string',
'required_verification' => 'bool',
'verification_status' => 'string',
'deactivated' => 'bool',
'unverified_hold_until' => 'string',
'canceled' => 'string',
'phone_next_renewal' => 'string',
'phone_number' => 'int',
'phone_price' => 'int',
'phone_region_id' => 'int',
'redirect_number' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'domain_id' => 'int32',
'auto_charge' => null,
'can_be_used' => null,
'category_name' => null,
'phone_country_code' => null,
'phone_purchase_date' => null,
'required_verification' => null,
'verification_status' => null,
'deactivated' => null,
'unverified_hold_until' => null,
'canceled' => null,
'phone_next_renewal' => null,
'phone_number' => 'int32',
'phone_price' => 'int32',
'phone_region_id' => 'int32',
'redirect_number' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'domain_id' => 'domain_id',
'auto_charge' => 'auto_charge',
'can_be_used' => 'can_be_used',
'category_name' => 'category_name',
'phone_country_code' => 'phone_country_code',
'phone_purchase_date' => 'phone_purchase_date',
'required_verification' => 'required_verification',
'verification_status' => 'verification_status',
'deactivated' => 'deactivated',
'unverified_hold_until' => 'unverified_hold_until',
'canceled' => 'canceled',
'phone_next_renewal' => 'phone_next_renewal',
'phone_number' => 'phone_number',
'phone_price' => 'phone_price',
'phone_region_id' => 'phone_region_id',
'redirect_number' => 'redirect_number'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'domain_id' => 'setDomainId',
'auto_charge' => 'setAutoCharge',
'can_be_used' => 'setCanBeUsed',
'category_name' => 'setCategoryName',
'phone_country_code' => 'setPhoneCountryCode',
'phone_purchase_date' => 'setPhonePurchaseDate',
'required_verification' => 'setRequiredVerification',
'verification_status' => 'setVerificationStatus',
'deactivated' => 'setDeactivated',
'unverified_hold_until' => 'setUnverifiedHoldUntil',
'canceled' => 'setCanceled',
'phone_next_renewal' => 'setPhoneNextRenewal',
'phone_number' => 'setPhoneNumber',
'phone_price' => 'setPhonePrice',
'phone_region_id' => 'setPhoneRegionId',
'redirect_number' => 'setRedirectNumber'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'domain_id' => 'getDomainId',
'auto_charge' => 'getAutoCharge',
'can_be_used' => 'getCanBeUsed',
'category_name' => 'getCategoryName',
'phone_country_code' => 'getPhoneCountryCode',
'phone_purchase_date' => 'getPhonePurchaseDate',
'required_verification' => 'getRequiredVerification',
'verification_status' => 'getVerificationStatus',
'deactivated' => 'getDeactivated',
'unverified_hold_until' => 'getUnverifiedHoldUntil',
'canceled' => 'getCanceled',
'phone_next_renewal' => 'getPhoneNextRenewal',
'phone_number' => 'getPhoneNumber',
'phone_price' => 'getPhonePrice',
'phone_region_id' => 'getPhoneRegionId',
'redirect_number' => 'getRedirectNumber'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['domain_id'] = isset($data['domain_id']) ? $data['domain_id'] : null;
        $this->container['auto_charge'] = isset($data['auto_charge']) ? $data['auto_charge'] : null;
        $this->container['can_be_used'] = isset($data['can_be_used']) ? $data['can_be_used'] : null;
        $this->container['category_name'] = isset($data['category_name']) ? $data['category_name'] : null;
        $this->container['phone_country_code'] = isset($data['phone_country_code']) ? $data['phone_country_code'] : null;
        $this->container['phone_purchase_date'] = isset($data['phone_purchase_date']) ? $data['phone_purchase_date'] : null;
        $this->container['required_verification'] = isset($data['required_verification']) ? $data['required_verification'] : null;
        $this->container['verification_status'] = isset($data['verification_status']) ? $data['verification_status'] : null;
        $this->container['deactivated'] = isset($data['deactivated']) ? $data['deactivated'] : null;
        $this->container['unverified_hold_until'] = isset($data['unverified_hold_until']) ? $data['unverified_hold_until'] : null;
        $this->container['canceled'] = isset($data['canceled']) ? $data['canceled'] : null;
        $this->container['phone_next_renewal'] = isset($data['phone_next_renewal']) ? $data['phone_next_renewal'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['phone_price'] = isset($data['phone_price']) ? $data['phone_price'] : null;
        $this->container['phone_region_id'] = isset($data['phone_region_id']) ? $data['phone_region_id'] : null;
        $this->container['redirect_number'] = isset($data['redirect_number']) ? $data['redirect_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets domain_id
     *
     * @return int
     */
    public function getDomainId()
    {
        return $this->container['domain_id'];
    }

    /**
     * Sets domain_id
     *
     * @param int $domain_id domain_id
     *
     * @return $this
     */
    public function setDomainId($domain_id)
    {
        $this->container['domain_id'] = $domain_id;

        return $this;
    }

    /**
     * Gets auto_charge
     *
     * @return bool
     */
    public function getAutoCharge()
    {
        return $this->container['auto_charge'];
    }

    /**
     * Sets auto_charge
     *
     * @param bool $auto_charge auto_charge
     *
     * @return $this
     */
    public function setAutoCharge($auto_charge)
    {
        $this->container['auto_charge'] = $auto_charge;

        return $this;
    }

    /**
     * Gets can_be_used
     *
     * @return bool
     */
    public function getCanBeUsed()
    {
        return $this->container['can_be_used'];
    }

    /**
     * Sets can_be_used
     *
     * @param bool $can_be_used can_be_used
     *
     * @return $this
     */
    public function setCanBeUsed($can_be_used)
    {
        $this->container['can_be_used'] = $can_be_used;

        return $this;
    }

    /**
     * Gets category_name
     *
     * @return string
     */
    public function getCategoryName()
    {
        return $this->container['category_name'];
    }

    /**
     * Sets category_name
     *
     * @param string $category_name category_name
     *
     * @return $this
     */
    public function setCategoryName($category_name)
    {
        $this->container['category_name'] = $category_name;

        return $this;
    }

    /**
     * Gets phone_country_code
     *
     * @return string
     */
    public function getPhoneCountryCode()
    {
        return $this->container['phone_country_code'];
    }

    /**
     * Sets phone_country_code
     *
     * @param string $phone_country_code phone_country_code
     *
     * @return $this
     */
    public function setPhoneCountryCode($phone_country_code)
    {
        $this->container['phone_country_code'] = $phone_country_code;

        return $this;
    }

    /**
     * Gets phone_purchase_date
     *
     * @return string
     */
    public function getPhonePurchaseDate()
    {
        return $this->container['phone_purchase_date'];
    }

    /**
     * Sets phone_purchase_date
     *
     * @param string $phone_purchase_date phone_purchase_date
     *
     * @return $this
     */
    public function setPhonePurchaseDate($phone_purchase_date)
    {
        $this->container['phone_purchase_date'] = $phone_purchase_date;

        return $this;
    }

    /**
     * Gets required_verification
     *
     * @return bool
     */
    public function getRequiredVerification()
    {
        return $this->container['required_verification'];
    }

    /**
     * Sets required_verification
     *
     * @param bool $required_verification required_verification
     *
     * @return $this
     */
    public function setRequiredVerification($required_verification)
    {
        $this->container['required_verification'] = $required_verification;

        return $this;
    }

    /**
     * Gets verification_status
     *
     * @return string
     */
    public function getVerificationStatus()
    {
        return $this->container['verification_status'];
    }

    /**
     * Sets verification_status
     *
     * @param string $verification_status verification_status
     *
     * @return $this
     */
    public function setVerificationStatus($verification_status)
    {
        $this->container['verification_status'] = $verification_status;

        return $this;
    }

    /**
     * Gets deactivated
     *
     * @return bool
     */
    public function getDeactivated()
    {
        return $this->container['deactivated'];
    }

    /**
     * Sets deactivated
     *
     * @param bool $deactivated deactivated
     *
     * @return $this
     */
    public function setDeactivated($deactivated)
    {
        $this->container['deactivated'] = $deactivated;

        return $this;
    }

    /**
     * Gets unverified_hold_until
     *
     * @return string
     */
    public function getUnverifiedHoldUntil()
    {
        return $this->container['unverified_hold_until'];
    }

    /**
     * Sets unverified_hold_until
     *
     * @param string $unverified_hold_until unverified_hold_until
     *
     * @return $this
     */
    public function setUnverifiedHoldUntil($unverified_hold_until)
    {
        $this->container['unverified_hold_until'] = $unverified_hold_until;

        return $this;
    }

    /**
     * Gets canceled
     *
     * @return string
     */
    public function getCanceled()
    {
        return $this->container['canceled'];
    }

    /**
     * Sets canceled
     *
     * @param string $canceled canceled
     *
     * @return $this
     */
    public function setCanceled($canceled)
    {
        $this->container['canceled'] = $canceled;

        return $this;
    }

    /**
     * Gets phone_next_renewal
     *
     * @return string
     */
    public function getPhoneNextRenewal()
    {
        return $this->container['phone_next_renewal'];
    }

    /**
     * Sets phone_next_renewal
     *
     * @param string $phone_next_renewal phone_next_renewal
     *
     * @return $this
     */
    public function setPhoneNextRenewal($phone_next_renewal)
    {
        $this->container['phone_next_renewal'] = $phone_next_renewal;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return int
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param int $phone_number phone_number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets phone_price
     *
     * @return int
     */
    public function getPhonePrice()
    {
        return $this->container['phone_price'];
    }

    /**
     * Sets phone_price
     *
     * @param int $phone_price phone_price
     *
     * @return $this
     */
    public function setPhonePrice($phone_price)
    {
        $this->container['phone_price'] = $phone_price;

        return $this;
    }

    /**
     * Gets phone_region_id
     *
     * @return int
     */
    public function getPhoneRegionId()
    {
        return $this->container['phone_region_id'];
    }

    /**
     * Sets phone_region_id
     *
     * @param int $phone_region_id phone_region_id
     *
     * @return $this
     */
    public function setPhoneRegionId($phone_region_id)
    {
        $this->container['phone_region_id'] = $phone_region_id;

        return $this;
    }

    /**
     * Gets redirect_number
     *
     * @return string
     */
    public function getRedirectNumber()
    {
        return $this->container['redirect_number'];
    }

    /**
     * Sets redirect_number
     *
     * @param string $redirect_number redirect_number
     *
     * @return $this
     */
    public function setRedirectNumber($redirect_number)
    {
        $this->container['redirect_number'] = $redirect_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
