<?php
/**
 * CampaignType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Smartcalls
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Voximplant Kit API Documentation
 *
 * <h1>Basic description</h1> <p>HTTP API is available via the <u>https://kit.voximplant.com/api/v3/<b>{method}</b></u> endpoint. To use the methods marked with the LOCK symbol, you need to generate an access_token via the <b>getAccessToken</b> method. Pass this access token to each HTTP API call.</p> <h1>Authentication</h1> <p>This API uses Custom Query Parameter for its authentication.</p> <p>The parameters that are needed to be sent for this type of authentication are as follows:</p> <ul>   <li><strong>access_token</strong></li>   <li><strong>domain</strong></li> </ul>
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.10
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Smartcalls\Model;

use \ArrayAccess;
use \Smartcalls\ObjectSerializer;

/**
 * CampaignType Class Doc Comment
 *
 * @category Class
 * @package  Smartcalls
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CampaignType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CampaignType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'title' => 'string',
'description' => 'string',
'date_start' => 'string',
'date_end' => 'string',
'date_create' => 'string',
'date_update' => 'string',
'working_days' => 'int[]',
'time_start' => 'string',
'time_end' => 'string',
'status' => 'string',
'max_attempts' => 'int',
'interval' => 'int',
'max_lines' => 'int',
'author_id' => 'int',
'domain_id' => 'int',
'scenario_id' => 'int',
'call_list_id' => 'int',
'phone_number_id' => 'int',
'callerid_id' => 'int',
'permanent' => 'bool',
'last_lunch_status' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'title' => null,
'description' => null,
'date_start' => null,
'date_end' => null,
'date_create' => null,
'date_update' => null,
'working_days' => null,
'time_start' => null,
'time_end' => null,
'status' => null,
'max_attempts' => null,
'interval' => null,
'max_lines' => null,
'author_id' => null,
'domain_id' => null,
'scenario_id' => null,
'call_list_id' => null,
'phone_number_id' => null,
'callerid_id' => null,
'permanent' => null,
'last_lunch_status' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'title' => 'title',
'description' => 'description',
'date_start' => 'date_start',
'date_end' => 'date_end',
'date_create' => 'date_create',
'date_update' => 'date_update',
'working_days' => 'working_days',
'time_start' => 'time_start',
'time_end' => 'time_end',
'status' => 'status',
'max_attempts' => 'max_attempts',
'interval' => 'interval',
'max_lines' => 'max_lines',
'author_id' => 'author_id',
'domain_id' => 'domain_id',
'scenario_id' => 'scenario_id',
'call_list_id' => 'call_list_id',
'phone_number_id' => 'phone_number_id',
'callerid_id' => 'callerid_id',
'permanent' => 'permanent',
'last_lunch_status' => 'last_lunch_status'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'title' => 'setTitle',
'description' => 'setDescription',
'date_start' => 'setDateStart',
'date_end' => 'setDateEnd',
'date_create' => 'setDateCreate',
'date_update' => 'setDateUpdate',
'working_days' => 'setWorkingDays',
'time_start' => 'setTimeStart',
'time_end' => 'setTimeEnd',
'status' => 'setStatus',
'max_attempts' => 'setMaxAttempts',
'interval' => 'setInterval',
'max_lines' => 'setMaxLines',
'author_id' => 'setAuthorId',
'domain_id' => 'setDomainId',
'scenario_id' => 'setScenarioId',
'call_list_id' => 'setCallListId',
'phone_number_id' => 'setPhoneNumberId',
'callerid_id' => 'setCalleridId',
'permanent' => 'setPermanent',
'last_lunch_status' => 'setLastLunchStatus'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'title' => 'getTitle',
'description' => 'getDescription',
'date_start' => 'getDateStart',
'date_end' => 'getDateEnd',
'date_create' => 'getDateCreate',
'date_update' => 'getDateUpdate',
'working_days' => 'getWorkingDays',
'time_start' => 'getTimeStart',
'time_end' => 'getTimeEnd',
'status' => 'getStatus',
'max_attempts' => 'getMaxAttempts',
'interval' => 'getInterval',
'max_lines' => 'getMaxLines',
'author_id' => 'getAuthorId',
'domain_id' => 'getDomainId',
'scenario_id' => 'getScenarioId',
'call_list_id' => 'getCallListId',
'phone_number_id' => 'getPhoneNumberId',
'callerid_id' => 'getCalleridId',
'permanent' => 'getPermanent',
'last_lunch_status' => 'getLastLunchStatus'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['date_start'] = isset($data['date_start']) ? $data['date_start'] : null;
        $this->container['date_end'] = isset($data['date_end']) ? $data['date_end'] : null;
        $this->container['date_create'] = isset($data['date_create']) ? $data['date_create'] : null;
        $this->container['date_update'] = isset($data['date_update']) ? $data['date_update'] : null;
        $this->container['working_days'] = isset($data['working_days']) ? $data['working_days'] : null;
        $this->container['time_start'] = isset($data['time_start']) ? $data['time_start'] : null;
        $this->container['time_end'] = isset($data['time_end']) ? $data['time_end'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['max_attempts'] = isset($data['max_attempts']) ? $data['max_attempts'] : null;
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['max_lines'] = isset($data['max_lines']) ? $data['max_lines'] : null;
        $this->container['author_id'] = isset($data['author_id']) ? $data['author_id'] : null;
        $this->container['domain_id'] = isset($data['domain_id']) ? $data['domain_id'] : null;
        $this->container['scenario_id'] = isset($data['scenario_id']) ? $data['scenario_id'] : null;
        $this->container['call_list_id'] = isset($data['call_list_id']) ? $data['call_list_id'] : null;
        $this->container['phone_number_id'] = isset($data['phone_number_id']) ? $data['phone_number_id'] : null;
        $this->container['callerid_id'] = isset($data['callerid_id']) ? $data['callerid_id'] : null;
        $this->container['permanent'] = isset($data['permanent']) ? $data['permanent'] : null;
        $this->container['last_lunch_status'] = isset($data['last_lunch_status']) ? $data['last_lunch_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets date_start
     *
     * @return string
     */
    public function getDateStart()
    {
        return $this->container['date_start'];
    }

    /**
     * Sets date_start
     *
     * @param string $date_start date_start
     *
     * @return $this
     */
    public function setDateStart($date_start)
    {
        $this->container['date_start'] = $date_start;

        return $this;
    }

    /**
     * Gets date_end
     *
     * @return string
     */
    public function getDateEnd()
    {
        return $this->container['date_end'];
    }

    /**
     * Sets date_end
     *
     * @param string $date_end date_end
     *
     * @return $this
     */
    public function setDateEnd($date_end)
    {
        $this->container['date_end'] = $date_end;

        return $this;
    }

    /**
     * Gets date_create
     *
     * @return string
     */
    public function getDateCreate()
    {
        return $this->container['date_create'];
    }

    /**
     * Sets date_create
     *
     * @param string $date_create date_create
     *
     * @return $this
     */
    public function setDateCreate($date_create)
    {
        $this->container['date_create'] = $date_create;

        return $this;
    }

    /**
     * Gets date_update
     *
     * @return string
     */
    public function getDateUpdate()
    {
        return $this->container['date_update'];
    }

    /**
     * Sets date_update
     *
     * @param string $date_update date_update
     *
     * @return $this
     */
    public function setDateUpdate($date_update)
    {
        $this->container['date_update'] = $date_update;

        return $this;
    }

    /**
     * Gets working_days
     *
     * @return int[]
     */
    public function getWorkingDays()
    {
        return $this->container['working_days'];
    }

    /**
     * Sets working_days
     *
     * @param int[] $working_days working_days
     *
     * @return $this
     */
    public function setWorkingDays($working_days)
    {
        $this->container['working_days'] = $working_days;

        return $this;
    }

    /**
     * Gets time_start
     *
     * @return string
     */
    public function getTimeStart()
    {
        return $this->container['time_start'];
    }

    /**
     * Sets time_start
     *
     * @param string $time_start time_start
     *
     * @return $this
     */
    public function setTimeStart($time_start)
    {
        $this->container['time_start'] = $time_start;

        return $this;
    }

    /**
     * Gets time_end
     *
     * @return string
     */
    public function getTimeEnd()
    {
        return $this->container['time_end'];
    }

    /**
     * Sets time_end
     *
     * @param string $time_end time_end
     *
     * @return $this
     */
    public function setTimeEnd($time_end)
    {
        $this->container['time_end'] = $time_end;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets max_attempts
     *
     * @return int
     */
    public function getMaxAttempts()
    {
        return $this->container['max_attempts'];
    }

    /**
     * Sets max_attempts
     *
     * @param int $max_attempts max_attempts
     *
     * @return $this
     */
    public function setMaxAttempts($max_attempts)
    {
        $this->container['max_attempts'] = $max_attempts;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return int
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param int $interval interval
     *
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets max_lines
     *
     * @return int
     */
    public function getMaxLines()
    {
        return $this->container['max_lines'];
    }

    /**
     * Sets max_lines
     *
     * @param int $max_lines max_lines
     *
     * @return $this
     */
    public function setMaxLines($max_lines)
    {
        $this->container['max_lines'] = $max_lines;

        return $this;
    }

    /**
     * Gets author_id
     *
     * @return int
     */
    public function getAuthorId()
    {
        return $this->container['author_id'];
    }

    /**
     * Sets author_id
     *
     * @param int $author_id author_id
     *
     * @return $this
     */
    public function setAuthorId($author_id)
    {
        $this->container['author_id'] = $author_id;

        return $this;
    }

    /**
     * Gets domain_id
     *
     * @return int
     */
    public function getDomainId()
    {
        return $this->container['domain_id'];
    }

    /**
     * Sets domain_id
     *
     * @param int $domain_id domain_id
     *
     * @return $this
     */
    public function setDomainId($domain_id)
    {
        $this->container['domain_id'] = $domain_id;

        return $this;
    }

    /**
     * Gets scenario_id
     *
     * @return int
     */
    public function getScenarioId()
    {
        return $this->container['scenario_id'];
    }

    /**
     * Sets scenario_id
     *
     * @param int $scenario_id scenario_id
     *
     * @return $this
     */
    public function setScenarioId($scenario_id)
    {
        $this->container['scenario_id'] = $scenario_id;

        return $this;
    }

    /**
     * Gets call_list_id
     *
     * @return int
     */
    public function getCallListId()
    {
        return $this->container['call_list_id'];
    }

    /**
     * Sets call_list_id
     *
     * @param int $call_list_id call_list_id
     *
     * @return $this
     */
    public function setCallListId($call_list_id)
    {
        $this->container['call_list_id'] = $call_list_id;

        return $this;
    }

    /**
     * Gets phone_number_id
     *
     * @return int
     */
    public function getPhoneNumberId()
    {
        return $this->container['phone_number_id'];
    }

    /**
     * Sets phone_number_id
     *
     * @param int $phone_number_id phone_number_id
     *
     * @return $this
     */
    public function setPhoneNumberId($phone_number_id)
    {
        $this->container['phone_number_id'] = $phone_number_id;

        return $this;
    }

    /**
     * Gets callerid_id
     *
     * @return int
     */
    public function getCalleridId()
    {
        return $this->container['callerid_id'];
    }

    /**
     * Sets callerid_id
     *
     * @param int $callerid_id callerid_id
     *
     * @return $this
     */
    public function setCalleridId($callerid_id)
    {
        $this->container['callerid_id'] = $callerid_id;

        return $this;
    }

    /**
     * Gets permanent
     *
     * @return bool
     */
    public function getPermanent()
    {
        return $this->container['permanent'];
    }

    /**
     * Sets permanent
     *
     * @param bool $permanent permanent
     *
     * @return $this
     */
    public function setPermanent($permanent)
    {
        $this->container['permanent'] = $permanent;

        return $this;
    }

    /**
     * Gets last_lunch_status
     *
     * @return string
     */
    public function getLastLunchStatus()
    {
        return $this->container['last_lunch_status'];
    }

    /**
     * Sets last_lunch_status
     *
     * @param string $last_lunch_status last_lunch_status
     *
     * @return $this
     */
    public function setLastLunchStatus($last_lunch_status)
    {
        $this->container['last_lunch_status'] = $last_lunch_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
