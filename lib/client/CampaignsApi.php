<?php
/**
 * CampaignsApi
 * PHP version 5
 *
 * @category Class
 * @package  Smartcalls
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* SmartCalls IO API Documentation
 *
* <h1>Basic description</h1> <p>HTTP API is available via the <u>https://smartcalls.io/api/v2/<b>{method}</b></u> endpoint. To use the methods marked with the LOCK symbol, you need to generate an access_token via the <b>getAccessToken</b> method. Pass this access token to each HTTP API call.</p> <h1>Authentication</h1> <p>This API uses Custom Query Parameter for its authentication.</p> <p>The parameters that are needed to be sent for this type of authentication are as follows:</p> <ul>   <li><strong>access_token</strong></li>   <li><strong>domain</strong></li> </ul>
 *
* OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.2
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Smartcalls\client;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Smartcalls\ApiException;
use Smartcalls\Configuration;
use Smartcalls\HeaderSelector;
use Smartcalls\ObjectSerializer;

/**
 * CampaignsApi Class Doc Comment
 *
 * @category Class
 * @package  Smartcalls
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CampaignsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }
    /**
     * Operation attemptDownloadStatReportPost
*
* @param  int $report_id Report ID. ID can be retrieved via the **exportStatReport** method. (required)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Smartcalls\Model\DownloadStatReportResponseType
     */
    public function attemptDownloadStatReportPost($report_id)
    {
        list($response) = $this->attemptDownloadStatReportPostWithHttpInfo($report_id);
        return $response;
    }

    /**
     * Operation attemptDownloadStatReportPostWithHttpInfo
*
* @param  int $report_id Report ID. ID can be retrieved via the **exportStatReport** method. (required)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Smartcalls\Model\DownloadStatReportResponseType, HTTP status code, HTTP response headers (array of strings)
     */
    public function attemptDownloadStatReportPostWithHttpInfo($report_id)
    {
        $returnType = '\Smartcalls\Model\DownloadStatReportResponseType';
        $request = $this->attemptDownloadStatReportPostRequest($report_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\DownloadStatReportResponseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 0:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\ErrorType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation attemptDownloadStatReportPostAsync
     *
     * 
     *
* @param  int $report_id Report ID. ID can be retrieved via the **exportStatReport** method. (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attemptDownloadStatReportPostAsync($report_id)
    {
        return $this->attemptDownloadStatReportPostAsyncWithHttpInfo($report_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation attemptDownloadStatReportPostAsyncWithHttpInfo
     *
     * 
     *
* @param  int $report_id Report ID. ID can be retrieved via the **exportStatReport** method. (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attemptDownloadStatReportPostAsyncWithHttpInfo($report_id)
    {
        $returnType = '\Smartcalls\Model\DownloadStatReportResponseType';
        $request = $this->attemptDownloadStatReportPostRequest($report_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'attemptDownloadStatReportPost'
     *
* @param  int $report_id Report ID. ID can be retrieved via the **exportStatReport** method. (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function attemptDownloadStatReportPostRequest($report_id)
    {
// verify the required parameter 'report_id' is set
        if ($report_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $report_id when calling attemptDownloadStatReportPost'
            );
        }
$resourcePath = '/attempt/downloadStatReport';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($report_id !== null) {
            $queryParams['report_id'] = ObjectSerializer::toQueryValue($report_id);
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation attemptExportStatReportPost
*
* @param  int $campaign_id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (required)
* @param  string $locale Document language (&lt;b&gt;example:&lt;/b&gt; &#x27;en&#x27; or &#x27;ru&#x27;) (required)
* @param  string $from Statistics start date (&lt;b&gt;example:&lt;/b&gt; &#x27;DD.MM.YYYY&#x27;) (optional)
* @param  string $to Statistics end date (&lt;b&gt;example:&lt;/b&gt; &#x27;DD.MM.YYYY&#x27;) (optional)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Smartcalls\Model\ExportStatReportResponseType
     */
    public function attemptExportStatReportPost($campaign_id, $locale, $from = null, $to = null)
    {
        list($response) = $this->attemptExportStatReportPostWithHttpInfo($campaign_id, $locale, $from, $to);
        return $response;
    }

    /**
     * Operation attemptExportStatReportPostWithHttpInfo
*
* @param  int $campaign_id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (required)
* @param  string $locale Document language (&lt;b&gt;example:&lt;/b&gt; &#x27;en&#x27; or &#x27;ru&#x27;) (required)
* @param  string $from Statistics start date (&lt;b&gt;example:&lt;/b&gt; &#x27;DD.MM.YYYY&#x27;) (optional)
* @param  string $to Statistics end date (&lt;b&gt;example:&lt;/b&gt; &#x27;DD.MM.YYYY&#x27;) (optional)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Smartcalls\Model\ExportStatReportResponseType, HTTP status code, HTTP response headers (array of strings)
     */
    public function attemptExportStatReportPostWithHttpInfo($campaign_id, $locale, $from = null, $to = null)
    {
        $returnType = '\Smartcalls\Model\ExportStatReportResponseType';
        $request = $this->attemptExportStatReportPostRequest($campaign_id, $locale, $from, $to);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\ExportStatReportResponseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 0:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\ErrorType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation attemptExportStatReportPostAsync
     *
     * 
     *
* @param  int $campaign_id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (required)
* @param  string $locale Document language (&lt;b&gt;example:&lt;/b&gt; &#x27;en&#x27; or &#x27;ru&#x27;) (required)
* @param  string $from Statistics start date (&lt;b&gt;example:&lt;/b&gt; &#x27;DD.MM.YYYY&#x27;) (optional)
* @param  string $to Statistics end date (&lt;b&gt;example:&lt;/b&gt; &#x27;DD.MM.YYYY&#x27;) (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attemptExportStatReportPostAsync($campaign_id, $locale, $from = null, $to = null)
    {
        return $this->attemptExportStatReportPostAsyncWithHttpInfo($campaign_id, $locale, $from, $to)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation attemptExportStatReportPostAsyncWithHttpInfo
     *
     * 
     *
* @param  int $campaign_id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (required)
* @param  string $locale Document language (&lt;b&gt;example:&lt;/b&gt; &#x27;en&#x27; or &#x27;ru&#x27;) (required)
* @param  string $from Statistics start date (&lt;b&gt;example:&lt;/b&gt; &#x27;DD.MM.YYYY&#x27;) (optional)
* @param  string $to Statistics end date (&lt;b&gt;example:&lt;/b&gt; &#x27;DD.MM.YYYY&#x27;) (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attemptExportStatReportPostAsyncWithHttpInfo($campaign_id, $locale, $from = null, $to = null)
    {
        $returnType = '\Smartcalls\Model\ExportStatReportResponseType';
        $request = $this->attemptExportStatReportPostRequest($campaign_id, $locale, $from, $to);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'attemptExportStatReportPost'
     *
* @param  int $campaign_id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (required)
* @param  string $locale Document language (&lt;b&gt;example:&lt;/b&gt; &#x27;en&#x27; or &#x27;ru&#x27;) (required)
* @param  string $from Statistics start date (&lt;b&gt;example:&lt;/b&gt; &#x27;DD.MM.YYYY&#x27;) (optional)
* @param  string $to Statistics end date (&lt;b&gt;example:&lt;/b&gt; &#x27;DD.MM.YYYY&#x27;) (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function attemptExportStatReportPostRequest($campaign_id, $locale, $from = null, $to = null)
    {
// verify the required parameter 'campaign_id' is set
        if ($campaign_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling attemptExportStatReportPost'
            );
        }
// verify the required parameter 'locale' is set
        if ($locale === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling attemptExportStatReportPost'
            );
        }
$resourcePath = '/attempt/exportStatReport';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($campaign_id !== null) {
            $queryParams['campaign_id'] = ObjectSerializer::toQueryValue($campaign_id);
        }
// query params
if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale);
        }
// query params
if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
// query params
if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation attemptGetStatReportStatusPost
*
* @param  int $report_id Report ID. ID can be retrieved via the **exportStatReport** method. (required)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Smartcalls\Model\GetStatReportStatusResponseType
     */
    public function attemptGetStatReportStatusPost($report_id)
    {
        list($response) = $this->attemptGetStatReportStatusPostWithHttpInfo($report_id);
        return $response;
    }

    /**
     * Operation attemptGetStatReportStatusPostWithHttpInfo
*
* @param  int $report_id Report ID. ID can be retrieved via the **exportStatReport** method. (required)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Smartcalls\Model\GetStatReportStatusResponseType, HTTP status code, HTTP response headers (array of strings)
     */
    public function attemptGetStatReportStatusPostWithHttpInfo($report_id)
    {
        $returnType = '\Smartcalls\Model\GetStatReportStatusResponseType';
        $request = $this->attemptGetStatReportStatusPostRequest($report_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\GetStatReportStatusResponseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 0:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\ErrorType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation attemptGetStatReportStatusPostAsync
     *
     * 
     *
* @param  int $report_id Report ID. ID can be retrieved via the **exportStatReport** method. (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attemptGetStatReportStatusPostAsync($report_id)
    {
        return $this->attemptGetStatReportStatusPostAsyncWithHttpInfo($report_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation attemptGetStatReportStatusPostAsyncWithHttpInfo
     *
     * 
     *
* @param  int $report_id Report ID. ID can be retrieved via the **exportStatReport** method. (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attemptGetStatReportStatusPostAsyncWithHttpInfo($report_id)
    {
        $returnType = '\Smartcalls\Model\GetStatReportStatusResponseType';
        $request = $this->attemptGetStatReportStatusPostRequest($report_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'attemptGetStatReportStatusPost'
     *
* @param  int $report_id Report ID. ID can be retrieved via the **exportStatReport** method. (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function attemptGetStatReportStatusPostRequest($report_id)
    {
// verify the required parameter 'report_id' is set
        if ($report_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $report_id when calling attemptGetStatReportStatusPost'
            );
        }
$resourcePath = '/attempt/getStatReportStatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($report_id !== null) {
            $queryParams['report_id'] = ObjectSerializer::toQueryValue($report_id);
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation attemptSearchAttemptsGet
*
* @param  int $id Attempt ID. ID can be retrieved via the **searchAttempts** method. (optional)
* @param  int $campaign_id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
* @param  string $fields List of return fields(comma separated). If it’s not specified the response contains full list of fields. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  string $sort Sorting data by field(s), add &#x27;-&#x27; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-id’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  int $page API methods return 20 records (one page) by default. The parameter specifies which page will be in response: first one, second one etc. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  int $per_page Sets the number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Smartcalls\Model\SearchAttemptsResponseType
     */
    public function attemptSearchAttemptsGet($id = null, $campaign_id = null, $fields = null, $sort = null, $page = null, $per_page = null)
    {
        list($response) = $this->attemptSearchAttemptsGetWithHttpInfo($id, $campaign_id, $fields, $sort, $page, $per_page);
        return $response;
    }

    /**
     * Operation attemptSearchAttemptsGetWithHttpInfo
*
* @param  int $id Attempt ID. ID can be retrieved via the **searchAttempts** method. (optional)
* @param  int $campaign_id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
* @param  string $fields List of return fields(comma separated). If it’s not specified the response contains full list of fields. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  string $sort Sorting data by field(s), add &#x27;-&#x27; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-id’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  int $page API methods return 20 records (one page) by default. The parameter specifies which page will be in response: first one, second one etc. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  int $per_page Sets the number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Smartcalls\Model\SearchAttemptsResponseType, HTTP status code, HTTP response headers (array of strings)
     */
    public function attemptSearchAttemptsGetWithHttpInfo($id = null, $campaign_id = null, $fields = null, $sort = null, $page = null, $per_page = null)
    {
        $returnType = '\Smartcalls\Model\SearchAttemptsResponseType';
        $request = $this->attemptSearchAttemptsGetRequest($id, $campaign_id, $fields, $sort, $page, $per_page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\SearchAttemptsResponseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 0:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\ErrorType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation attemptSearchAttemptsGetAsync
     *
     * 
     *
* @param  int $id Attempt ID. ID can be retrieved via the **searchAttempts** method. (optional)
* @param  int $campaign_id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
* @param  string $fields List of return fields(comma separated). If it’s not specified the response contains full list of fields. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  string $sort Sorting data by field(s), add &#x27;-&#x27; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-id’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  int $page API methods return 20 records (one page) by default. The parameter specifies which page will be in response: first one, second one etc. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  int $per_page Sets the number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attemptSearchAttemptsGetAsync($id = null, $campaign_id = null, $fields = null, $sort = null, $page = null, $per_page = null)
    {
        return $this->attemptSearchAttemptsGetAsyncWithHttpInfo($id, $campaign_id, $fields, $sort, $page, $per_page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation attemptSearchAttemptsGetAsyncWithHttpInfo
     *
     * 
     *
* @param  int $id Attempt ID. ID can be retrieved via the **searchAttempts** method. (optional)
* @param  int $campaign_id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
* @param  string $fields List of return fields(comma separated). If it’s not specified the response contains full list of fields. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  string $sort Sorting data by field(s), add &#x27;-&#x27; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-id’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  int $page API methods return 20 records (one page) by default. The parameter specifies which page will be in response: first one, second one etc. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  int $per_page Sets the number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attemptSearchAttemptsGetAsyncWithHttpInfo($id = null, $campaign_id = null, $fields = null, $sort = null, $page = null, $per_page = null)
    {
        $returnType = '\Smartcalls\Model\SearchAttemptsResponseType';
        $request = $this->attemptSearchAttemptsGetRequest($id, $campaign_id, $fields, $sort, $page, $per_page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'attemptSearchAttemptsGet'
     *
* @param  int $id Attempt ID. ID can be retrieved via the **searchAttempts** method. (optional)
* @param  int $campaign_id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
* @param  string $fields List of return fields(comma separated). If it’s not specified the response contains full list of fields. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  string $sort Sorting data by field(s), add &#x27;-&#x27; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-id’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  int $page API methods return 20 records (one page) by default. The parameter specifies which page will be in response: first one, second one etc. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  int $per_page Sets the number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function attemptSearchAttemptsGetRequest($id = null, $campaign_id = null, $fields = null, $sort = null, $page = null, $per_page = null)
    {
$resourcePath = '/attempt/searchAttempts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
// query params
if ($campaign_id !== null) {
            $queryParams['campaign_id'] = ObjectSerializer::toQueryValue($campaign_id);
        }
// query params
if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
// query params
if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
// query params
if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
// query params
if ($per_page !== null) {
            $queryParams['per-page'] = ObjectSerializer::toQueryValue($per_page);
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation outboundAppendToCampaignPost
*
* @param  int $campaign_id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
* @param  string $rows Format is JSON string. Example of JSON string to specify the data to append: &lt;br /&gt;&lt;pre&gt;[{\&quot;phone\&quot;: \&quot;+79101234567\&quot;, \&quot;UTC\&quot;: \&quot;Europe/Moscow\&quot;, \&quot;custom_field\&quot;: \&quot;custom_value\&quot;}, ...]&lt;/pre&gt; (optional)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Smartcalls\Model\AppendToCampaignResponseType
     */
    public function outboundAppendToCampaignPost($campaign_id = null, $rows = null)
    {
        list($response) = $this->outboundAppendToCampaignPostWithHttpInfo($campaign_id, $rows);
        return $response;
    }

    /**
     * Operation outboundAppendToCampaignPostWithHttpInfo
*
* @param  int $campaign_id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
* @param  string $rows Format is JSON string. Example of JSON string to specify the data to append: &lt;br /&gt;&lt;pre&gt;[{\&quot;phone\&quot;: \&quot;+79101234567\&quot;, \&quot;UTC\&quot;: \&quot;Europe/Moscow\&quot;, \&quot;custom_field\&quot;: \&quot;custom_value\&quot;}, ...]&lt;/pre&gt; (optional)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Smartcalls\Model\AppendToCampaignResponseType, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundAppendToCampaignPostWithHttpInfo($campaign_id = null, $rows = null)
    {
        $returnType = '\Smartcalls\Model\AppendToCampaignResponseType';
        $request = $this->outboundAppendToCampaignPostRequest($campaign_id, $rows);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\AppendToCampaignResponseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 0:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\ErrorType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation outboundAppendToCampaignPostAsync
     *
     * 
     *
* @param  int $campaign_id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
* @param  string $rows Format is JSON string. Example of JSON string to specify the data to append: &lt;br /&gt;&lt;pre&gt;[{\&quot;phone\&quot;: \&quot;+79101234567\&quot;, \&quot;UTC\&quot;: \&quot;Europe/Moscow\&quot;, \&quot;custom_field\&quot;: \&quot;custom_value\&quot;}, ...]&lt;/pre&gt; (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundAppendToCampaignPostAsync($campaign_id = null, $rows = null)
    {
        return $this->outboundAppendToCampaignPostAsyncWithHttpInfo($campaign_id, $rows)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation outboundAppendToCampaignPostAsyncWithHttpInfo
     *
     * 
     *
* @param  int $campaign_id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
* @param  string $rows Format is JSON string. Example of JSON string to specify the data to append: &lt;br /&gt;&lt;pre&gt;[{\&quot;phone\&quot;: \&quot;+79101234567\&quot;, \&quot;UTC\&quot;: \&quot;Europe/Moscow\&quot;, \&quot;custom_field\&quot;: \&quot;custom_value\&quot;}, ...]&lt;/pre&gt; (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundAppendToCampaignPostAsyncWithHttpInfo($campaign_id = null, $rows = null)
    {
        $returnType = '\Smartcalls\Model\AppendToCampaignResponseType';
        $request = $this->outboundAppendToCampaignPostRequest($campaign_id, $rows);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'outboundAppendToCampaignPost'
     *
* @param  int $campaign_id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
* @param  string $rows Format is JSON string. Example of JSON string to specify the data to append: &lt;br /&gt;&lt;pre&gt;[{\&quot;phone\&quot;: \&quot;+79101234567\&quot;, \&quot;UTC\&quot;: \&quot;Europe/Moscow\&quot;, \&quot;custom_field\&quot;: \&quot;custom_value\&quot;}, ...]&lt;/pre&gt; (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundAppendToCampaignPostRequest($campaign_id = null, $rows = null)
    {
$resourcePath = '/outbound/appendToCampaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($campaign_id !== null) {
            $queryParams['campaign_id'] = ObjectSerializer::toQueryValue($campaign_id);
        }
// query params
if ($rows !== null) {
            $queryParams['rows'] = ObjectSerializer::toQueryValue($rows);
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation outboundDeleteCampaignPost
*
* @param  int $id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (required)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Smartcalls\Model\DeleteCampaignResponseType
     */
    public function outboundDeleteCampaignPost($id)
    {
        list($response) = $this->outboundDeleteCampaignPostWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation outboundDeleteCampaignPostWithHttpInfo
*
* @param  int $id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (required)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Smartcalls\Model\DeleteCampaignResponseType, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundDeleteCampaignPostWithHttpInfo($id)
    {
        $returnType = '\Smartcalls\Model\DeleteCampaignResponseType';
        $request = $this->outboundDeleteCampaignPostRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\DeleteCampaignResponseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 0:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\ErrorType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation outboundDeleteCampaignPostAsync
     *
     * 
     *
* @param  int $id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDeleteCampaignPostAsync($id)
    {
        return $this->outboundDeleteCampaignPostAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation outboundDeleteCampaignPostAsyncWithHttpInfo
     *
     * 
     *
* @param  int $id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDeleteCampaignPostAsyncWithHttpInfo($id)
    {
        $returnType = '\Smartcalls\Model\DeleteCampaignResponseType';
        $request = $this->outboundDeleteCampaignPostRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'outboundDeleteCampaignPost'
     *
* @param  int $id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundDeleteCampaignPostRequest($id)
    {
// verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling outboundDeleteCampaignPost'
            );
        }
$resourcePath = '/outbound/deleteCampaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation outboundGetCallListTemplatePost
*
* @param  int $campaign_id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (required)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Smartcalls\Model\GetCallListTemplateResponseType
     */
    public function outboundGetCallListTemplatePost($campaign_id)
    {
        list($response) = $this->outboundGetCallListTemplatePostWithHttpInfo($campaign_id);
        return $response;
    }

    /**
     * Operation outboundGetCallListTemplatePostWithHttpInfo
*
* @param  int $campaign_id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (required)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Smartcalls\Model\GetCallListTemplateResponseType, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundGetCallListTemplatePostWithHttpInfo($campaign_id)
    {
        $returnType = '\Smartcalls\Model\GetCallListTemplateResponseType';
        $request = $this->outboundGetCallListTemplatePostRequest($campaign_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\GetCallListTemplateResponseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 0:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\ErrorType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation outboundGetCallListTemplatePostAsync
     *
     * 
     *
* @param  int $campaign_id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundGetCallListTemplatePostAsync($campaign_id)
    {
        return $this->outboundGetCallListTemplatePostAsyncWithHttpInfo($campaign_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation outboundGetCallListTemplatePostAsyncWithHttpInfo
     *
     * 
     *
* @param  int $campaign_id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundGetCallListTemplatePostAsyncWithHttpInfo($campaign_id)
    {
        $returnType = '\Smartcalls\Model\GetCallListTemplateResponseType';
        $request = $this->outboundGetCallListTemplatePostRequest($campaign_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'outboundGetCallListTemplatePost'
     *
* @param  int $campaign_id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundGetCallListTemplatePostRequest($campaign_id)
    {
// verify the required parameter 'campaign_id' is set
        if ($campaign_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling outboundGetCallListTemplatePost'
            );
        }
$resourcePath = '/outbound/getCallListTemplate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($campaign_id !== null) {
            $queryParams['campaign_id'] = ObjectSerializer::toQueryValue($campaign_id);
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation outboundInitCampaignPost
*
* @param  string $title title (optional)
* @param  int $max_attempts max_attempts (optional)
* @param  int $interval interval (optional)
* @param  int $max_lines max_lines (optional)
* @param  int $scenario_id scenario_id (optional)
* @param  int $phone_number_id phone_number_id (optional)
* @param  int $caller_id caller_id (optional)
* @param  string $time_start time_start (optional)
* @param  string $time_end time_end (optional)
* @param  string $date_start date_start (optional)
* @param  string $date_end date_end (optional)
* @param  bool $permanent permanent (optional)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Smartcalls\Model\InitCampaignResponseType
     */
    public function outboundInitCampaignPost($title = null, $max_attempts = null, $interval = null, $max_lines = null, $scenario_id = null, $phone_number_id = null, $caller_id = null, $time_start = null, $time_end = null, $date_start = null, $date_end = null, $permanent = null)
    {
        list($response) = $this->outboundInitCampaignPostWithHttpInfo($title, $max_attempts, $interval, $max_lines, $scenario_id, $phone_number_id, $caller_id, $time_start, $time_end, $date_start, $date_end, $permanent);
        return $response;
    }

    /**
     * Operation outboundInitCampaignPostWithHttpInfo
*
* @param  string $title (optional)
* @param  int $max_attempts (optional)
* @param  int $interval (optional)
* @param  int $max_lines (optional)
* @param  int $scenario_id (optional)
* @param  int $phone_number_id (optional)
* @param  int $caller_id (optional)
* @param  string $time_start (optional)
* @param  string $time_end (optional)
* @param  string $date_start (optional)
* @param  string $date_end (optional)
* @param  bool $permanent (optional)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Smartcalls\Model\InitCampaignResponseType, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundInitCampaignPostWithHttpInfo($title = null, $max_attempts = null, $interval = null, $max_lines = null, $scenario_id = null, $phone_number_id = null, $caller_id = null, $time_start = null, $time_end = null, $date_start = null, $date_end = null, $permanent = null)
    {
        $returnType = '\Smartcalls\Model\InitCampaignResponseType';
        $request = $this->outboundInitCampaignPostRequest($title, $max_attempts, $interval, $max_lines, $scenario_id, $phone_number_id, $caller_id, $time_start, $time_end, $date_start, $date_end, $permanent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\InitCampaignResponseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 0:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\ErrorType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation outboundInitCampaignPostAsync
     *
     * 
     *
* @param  string $title (optional)
* @param  int $max_attempts (optional)
* @param  int $interval (optional)
* @param  int $max_lines (optional)
* @param  int $scenario_id (optional)
* @param  int $phone_number_id (optional)
* @param  int $caller_id (optional)
* @param  string $time_start (optional)
* @param  string $time_end (optional)
* @param  string $date_start (optional)
* @param  string $date_end (optional)
* @param  bool $permanent (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundInitCampaignPostAsync($title = null, $max_attempts = null, $interval = null, $max_lines = null, $scenario_id = null, $phone_number_id = null, $caller_id = null, $time_start = null, $time_end = null, $date_start = null, $date_end = null, $permanent = null)
    {
        return $this->outboundInitCampaignPostAsyncWithHttpInfo($title, $max_attempts, $interval, $max_lines, $scenario_id, $phone_number_id, $caller_id, $time_start, $time_end, $date_start, $date_end, $permanent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation outboundInitCampaignPostAsyncWithHttpInfo
     *
     * 
     *
* @param  string $title (optional)
* @param  int $max_attempts (optional)
* @param  int $interval (optional)
* @param  int $max_lines (optional)
* @param  int $scenario_id (optional)
* @param  int $phone_number_id (optional)
* @param  int $caller_id (optional)
* @param  string $time_start (optional)
* @param  string $time_end (optional)
* @param  string $date_start (optional)
* @param  string $date_end (optional)
* @param  bool $permanent (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundInitCampaignPostAsyncWithHttpInfo($title = null, $max_attempts = null, $interval = null, $max_lines = null, $scenario_id = null, $phone_number_id = null, $caller_id = null, $time_start = null, $time_end = null, $date_start = null, $date_end = null, $permanent = null)
    {
        $returnType = '\Smartcalls\Model\InitCampaignResponseType';
        $request = $this->outboundInitCampaignPostRequest($title, $max_attempts, $interval, $max_lines, $scenario_id, $phone_number_id, $caller_id, $time_start, $time_end, $date_start, $date_end, $permanent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'outboundInitCampaignPost'
     *
* @param  string $title (optional)
* @param  int $max_attempts (optional)
* @param  int $interval (optional)
* @param  int $max_lines (optional)
* @param  int $scenario_id (optional)
* @param  int $phone_number_id (optional)
* @param  int $caller_id (optional)
* @param  string $time_start (optional)
* @param  string $time_end (optional)
* @param  string $date_start (optional)
* @param  string $date_end (optional)
* @param  bool $permanent (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundInitCampaignPostRequest($title = null, $max_attempts = null, $interval = null, $max_lines = null, $scenario_id = null, $phone_number_id = null, $caller_id = null, $time_start = null, $time_end = null, $date_start = null, $date_end = null, $permanent = null)
    {
$resourcePath = '/outbound/initCampaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
// form params
        if ($max_attempts !== null) {
            $formParams['max_attempts'] = ObjectSerializer::toFormValue($max_attempts);
        }
// form params
        if ($interval !== null) {
            $formParams['interval'] = ObjectSerializer::toFormValue($interval);
        }
// form params
        if ($max_lines !== null) {
            $formParams['max_lines'] = ObjectSerializer::toFormValue($max_lines);
        }
// form params
        if ($scenario_id !== null) {
            $formParams['scenario_id'] = ObjectSerializer::toFormValue($scenario_id);
        }
// form params
        if ($phone_number_id !== null) {
            $formParams['phone_number_id'] = ObjectSerializer::toFormValue($phone_number_id);
        }
// form params
        if ($caller_id !== null) {
            $formParams['caller_id'] = ObjectSerializer::toFormValue($caller_id);
        }
// form params
        if ($time_start !== null) {
            $formParams['time_start'] = ObjectSerializer::toFormValue($time_start);
        }
// form params
        if ($time_end !== null) {
            $formParams['time_end'] = ObjectSerializer::toFormValue($time_end);
        }
// form params
        if ($date_start !== null) {
            $formParams['date_start'] = ObjectSerializer::toFormValue($date_start);
        }
// form params
        if ($date_end !== null) {
            $formParams['date_end'] = ObjectSerializer::toFormValue($date_end);
        }
// form params
        if ($permanent !== null) {
            $formParams['permanent'] = ObjectSerializer::toFormValue($permanent);
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation outboundPauseCampaignPost
*
* @param  int $id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Smartcalls\Model\PauseCampaignResponseType
     */
    public function outboundPauseCampaignPost($id = null)
    {
        list($response) = $this->outboundPauseCampaignPostWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation outboundPauseCampaignPostWithHttpInfo
*
* @param  int $id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Smartcalls\Model\PauseCampaignResponseType, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundPauseCampaignPostWithHttpInfo($id = null)
    {
        $returnType = '\Smartcalls\Model\PauseCampaignResponseType';
        $request = $this->outboundPauseCampaignPostRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\PauseCampaignResponseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 0:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\ErrorType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation outboundPauseCampaignPostAsync
     *
     * 
     *
* @param  int $id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundPauseCampaignPostAsync($id = null)
    {
        return $this->outboundPauseCampaignPostAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation outboundPauseCampaignPostAsyncWithHttpInfo
     *
     * 
     *
* @param  int $id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundPauseCampaignPostAsyncWithHttpInfo($id = null)
    {
        $returnType = '\Smartcalls\Model\PauseCampaignResponseType';
        $request = $this->outboundPauseCampaignPostRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'outboundPauseCampaignPost'
     *
* @param  int $id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundPauseCampaignPostRequest($id = null)
    {
$resourcePath = '/outbound/pauseCampaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation outboundResumeCampaignPost
*
* @param  int $id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Smartcalls\Model\ResumeCampaignResponseType
     */
    public function outboundResumeCampaignPost($id = null)
    {
        list($response) = $this->outboundResumeCampaignPostWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation outboundResumeCampaignPostWithHttpInfo
*
* @param  int $id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Smartcalls\Model\ResumeCampaignResponseType, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundResumeCampaignPostWithHttpInfo($id = null)
    {
        $returnType = '\Smartcalls\Model\ResumeCampaignResponseType';
        $request = $this->outboundResumeCampaignPostRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\ResumeCampaignResponseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 0:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\ErrorType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation outboundResumeCampaignPostAsync
     *
     * 
     *
* @param  int $id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundResumeCampaignPostAsync($id = null)
    {
        return $this->outboundResumeCampaignPostAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation outboundResumeCampaignPostAsyncWithHttpInfo
     *
     * 
     *
* @param  int $id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundResumeCampaignPostAsyncWithHttpInfo($id = null)
    {
        $returnType = '\Smartcalls\Model\ResumeCampaignResponseType';
        $request = $this->outboundResumeCampaignPostRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'outboundResumeCampaignPost'
     *
* @param  int $id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundResumeCampaignPostRequest($id = null)
    {
$resourcePath = '/outbound/resumeCampaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation outboundSearchCampaignsGet
*
* @param  int $id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
* @param  string $status Campaign status. Possible values are draft, error, processing, ready, canceled, completed, paused, started. (optional)
* @param  string $date_start Date start. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $date_end Date end. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $date_create Date end. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $title Title of the campaign. (optional)
* @param  string $fields List of return fields(comma separated). If it’s not specified the response contains full list of fields. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  string $sort Sorting data by field(s), add &#x27;-&#x27; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-datetime_start’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  int $page API methods return 20 records (one page) by default. The parameter specifies which page will be in response: first one, second one etc. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  int $per_page Sets the number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Smartcalls\Model\SearchCampaignsResponseType
     */
    public function outboundSearchCampaignsGet($id = null, $status = null, $date_start = null, $date_end = null, $date_create = null, $title = null, $fields = null, $sort = null, $page = null, $per_page = null)
    {
        list($response) = $this->outboundSearchCampaignsGetWithHttpInfo($id, $status, $date_start, $date_end, $date_create, $title, $fields, $sort, $page, $per_page);
        return $response;
    }

    /**
     * Operation outboundSearchCampaignsGetWithHttpInfo
*
* @param  int $id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
* @param  string $status Campaign status. Possible values are draft, error, processing, ready, canceled, completed, paused, started. (optional)
* @param  string $date_start Date start. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $date_end Date end. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $date_create Date end. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $title Title of the campaign. (optional)
* @param  string $fields List of return fields(comma separated). If it’s not specified the response contains full list of fields. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  string $sort Sorting data by field(s), add &#x27;-&#x27; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-datetime_start’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  int $page API methods return 20 records (one page) by default. The parameter specifies which page will be in response: first one, second one etc. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  int $per_page Sets the number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Smartcalls\Model\SearchCampaignsResponseType, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundSearchCampaignsGetWithHttpInfo($id = null, $status = null, $date_start = null, $date_end = null, $date_create = null, $title = null, $fields = null, $sort = null, $page = null, $per_page = null)
    {
        $returnType = '\Smartcalls\Model\SearchCampaignsResponseType';
        $request = $this->outboundSearchCampaignsGetRequest($id, $status, $date_start, $date_end, $date_create, $title, $fields, $sort, $page, $per_page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\SearchCampaignsResponseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 0:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\ErrorType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation outboundSearchCampaignsGetAsync
     *
     * 
     *
* @param  int $id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
* @param  string $status Campaign status. Possible values are draft, error, processing, ready, canceled, completed, paused, started. (optional)
* @param  string $date_start Date start. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $date_end Date end. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $date_create Date end. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $title Title of the campaign. (optional)
* @param  string $fields List of return fields(comma separated). If it’s not specified the response contains full list of fields. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  string $sort Sorting data by field(s), add &#x27;-&#x27; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-datetime_start’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  int $page API methods return 20 records (one page) by default. The parameter specifies which page will be in response: first one, second one etc. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  int $per_page Sets the number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundSearchCampaignsGetAsync($id = null, $status = null, $date_start = null, $date_end = null, $date_create = null, $title = null, $fields = null, $sort = null, $page = null, $per_page = null)
    {
        return $this->outboundSearchCampaignsGetAsyncWithHttpInfo($id, $status, $date_start, $date_end, $date_create, $title, $fields, $sort, $page, $per_page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation outboundSearchCampaignsGetAsyncWithHttpInfo
     *
     * 
     *
* @param  int $id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
* @param  string $status Campaign status. Possible values are draft, error, processing, ready, canceled, completed, paused, started. (optional)
* @param  string $date_start Date start. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $date_end Date end. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $date_create Date end. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $title Title of the campaign. (optional)
* @param  string $fields List of return fields(comma separated). If it’s not specified the response contains full list of fields. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  string $sort Sorting data by field(s), add &#x27;-&#x27; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-datetime_start’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  int $page API methods return 20 records (one page) by default. The parameter specifies which page will be in response: first one, second one etc. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  int $per_page Sets the number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundSearchCampaignsGetAsyncWithHttpInfo($id = null, $status = null, $date_start = null, $date_end = null, $date_create = null, $title = null, $fields = null, $sort = null, $page = null, $per_page = null)
    {
        $returnType = '\Smartcalls\Model\SearchCampaignsResponseType';
        $request = $this->outboundSearchCampaignsGetRequest($id, $status, $date_start, $date_end, $date_create, $title, $fields, $sort, $page, $per_page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'outboundSearchCampaignsGet'
     *
* @param  int $id Campaign ID. ID can be retrieved via the **searchCampaigns** method. (optional)
* @param  string $status Campaign status. Possible values are draft, error, processing, ready, canceled, completed, paused, started. (optional)
* @param  string $date_start Date start. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $date_end Date end. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $date_create Date end. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $title Title of the campaign. (optional)
* @param  string $fields List of return fields(comma separated). If it’s not specified the response contains full list of fields. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  string $sort Sorting data by field(s), add &#x27;-&#x27; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-datetime_start’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  int $page API methods return 20 records (one page) by default. The parameter specifies which page will be in response: first one, second one etc. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
* @param  int $per_page Sets the number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests.&lt;/b&gt; (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundSearchCampaignsGetRequest($id = null, $status = null, $date_start = null, $date_end = null, $date_create = null, $title = null, $fields = null, $sort = null, $page = null, $per_page = null)
    {
$resourcePath = '/outbound/searchCampaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
// query params
if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
// query params
if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start);
        }
// query params
if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end);
        }
// query params
if ($date_create !== null) {
            $queryParams['date_create'] = ObjectSerializer::toQueryValue($date_create);
        }
// query params
if ($title !== null) {
            $queryParams['title'] = ObjectSerializer::toQueryValue($title);
        }
// query params
if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
// query params
if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
// query params
if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
// query params
if ($per_page !== null) {
            $queryParams['per-page'] = ObjectSerializer::toQueryValue($per_page);
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation outboundStatPost
*
* @param  int[] $campaign_ids Array with the campaign ID(s). Example: [123,321]. ID(s) can be retrieved via the **searchCampaigns** method. (optional)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Smartcalls\Model\CampaignStatResponseType
     */
    public function outboundStatPost($campaign_ids = null)
    {
        list($response) = $this->outboundStatPostWithHttpInfo($campaign_ids);
        return $response;
    }

    /**
     * Operation outboundStatPostWithHttpInfo
*
* @param  int[] $campaign_ids Array with the campaign ID(s). Example: [123,321]. ID(s) can be retrieved via the **searchCampaigns** method. (optional)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Smartcalls\Model\CampaignStatResponseType, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundStatPostWithHttpInfo($campaign_ids = null)
    {
        $returnType = '\Smartcalls\Model\CampaignStatResponseType';
        $request = $this->outboundStatPostRequest($campaign_ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\CampaignStatResponseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 0:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\ErrorType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation outboundStatPostAsync
     *
     * 
     *
* @param  int[] $campaign_ids Array with the campaign ID(s). Example: [123,321]. ID(s) can be retrieved via the **searchCampaigns** method. (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundStatPostAsync($campaign_ids = null)
    {
        return $this->outboundStatPostAsyncWithHttpInfo($campaign_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation outboundStatPostAsyncWithHttpInfo
     *
     * 
     *
* @param  int[] $campaign_ids Array with the campaign ID(s). Example: [123,321]. ID(s) can be retrieved via the **searchCampaigns** method. (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundStatPostAsyncWithHttpInfo($campaign_ids = null)
    {
        $returnType = '\Smartcalls\Model\CampaignStatResponseType';
        $request = $this->outboundStatPostRequest($campaign_ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'outboundStatPost'
     *
* @param  int[] $campaign_ids Array with the campaign ID(s). Example: [123,321]. ID(s) can be retrieved via the **searchCampaigns** method. (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundStatPostRequest($campaign_ids = null)
    {
$resourcePath = '/outbound/stat';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if (is_array($campaign_ids)) {
            $campaign_ids = ObjectSerializer::serializeCollection($campaign_ids, 'csv', true);
        }
if ($campaign_ids !== null) {
            $queryParams['campaign_ids'] = ObjectSerializer::toQueryValue($campaign_ids);
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

/**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
