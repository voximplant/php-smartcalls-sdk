<?php
/**
 * CallsApi
 * PHP version 5
 *
 * @category Class
 * @package  Smartcalls
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* SmartCalls IO API Documentation
 *
* <h1>Basic description</h1> <p>HTTP API is available via the <u>https://smartcalls.io/api/v2/<b>{method}</b></u> endpoint. To use the methods marked with the LOCK symbol, you need to generate an access_token via the <b>getAccessToken</b> method. Pass this access token to each HTTP API call.</p> <h1>Authentication</h1> <p>This API uses Custom Query Parameter for its authentication.</p> <p>The parameters that are needed to be sent for this type of authentication are as follows:</p> <ul>   <li><strong>access_token</strong></li>   <li><strong>domain</strong></li> </ul>
 *
* OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.2
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Smartcalls\client;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Smartcalls\ApiException;
use Smartcalls\Configuration;
use Smartcalls\HeaderSelector;
use Smartcalls\ObjectSerializer;

/**
 * CallsApi Class Doc Comment
 *
 * @category Class
 * @package  Smartcalls
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CallsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }
    /**
     * Operation callsDownloadHistoryReportPost
*
* @param  int $report_id Report ID. ID can be retrieved via the **exportHistoryReport** method. (required)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Smartcalls\Model\DownloadHistoryReportResponseType
     */
    public function callsDownloadHistoryReportPost($report_id)
    {
        list($response) = $this->callsDownloadHistoryReportPostWithHttpInfo($report_id);
        return $response;
    }

    /**
     * Operation callsDownloadHistoryReportPostWithHttpInfo
*
* @param  int $report_id Report ID. ID can be retrieved via the **exportHistoryReport** method. (required)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Smartcalls\Model\DownloadHistoryReportResponseType, HTTP status code, HTTP response headers (array of strings)
     */
    public function callsDownloadHistoryReportPostWithHttpInfo($report_id)
    {
        $returnType = '\Smartcalls\Model\DownloadHistoryReportResponseType';
        $request = $this->callsDownloadHistoryReportPostRequest($report_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\DownloadHistoryReportResponseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 0:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\ErrorType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation callsDownloadHistoryReportPostAsync
     *
     * 
     *
* @param  int $report_id Report ID. ID can be retrieved via the **exportHistoryReport** method. (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsDownloadHistoryReportPostAsync($report_id)
    {
        return $this->callsDownloadHistoryReportPostAsyncWithHttpInfo($report_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callsDownloadHistoryReportPostAsyncWithHttpInfo
     *
     * 
     *
* @param  int $report_id Report ID. ID can be retrieved via the **exportHistoryReport** method. (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsDownloadHistoryReportPostAsyncWithHttpInfo($report_id)
    {
        $returnType = '\Smartcalls\Model\DownloadHistoryReportResponseType';
        $request = $this->callsDownloadHistoryReportPostRequest($report_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callsDownloadHistoryReportPost'
     *
* @param  int $report_id Report ID. ID can be retrieved via the **exportHistoryReport** method. (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callsDownloadHistoryReportPostRequest($report_id)
    {
// verify the required parameter 'report_id' is set
        if ($report_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $report_id when calling callsDownloadHistoryReportPost'
            );
        }
$resourcePath = '/calls/downloadHistoryReport';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($report_id !== null) {
            $queryParams['report_id'] = ObjectSerializer::toQueryValue($report_id);
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callsExportHistoryReportPost
*
* @param  string $call_direction Call direction (&lt;b&gt;example:&lt;/b&gt; ‘call_direction&#x3D;outgoing’ or ‘call_direction&#x3D;incoming’ or ‘call_direction&#x3D;all’) (optional)
* @param  string $from Start date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $to End date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Smartcalls\Model\ExportHistoryReportResponseType
     */
    public function callsExportHistoryReportPost($call_direction = null, $from = null, $to = null)
    {
        list($response) = $this->callsExportHistoryReportPostWithHttpInfo($call_direction, $from, $to);
        return $response;
    }

    /**
     * Operation callsExportHistoryReportPostWithHttpInfo
*
* @param  string $call_direction Call direction (&lt;b&gt;example:&lt;/b&gt; ‘call_direction&#x3D;outgoing’ or ‘call_direction&#x3D;incoming’ or ‘call_direction&#x3D;all’) (optional)
* @param  string $from Start date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $to End date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Smartcalls\Model\ExportHistoryReportResponseType, HTTP status code, HTTP response headers (array of strings)
     */
    public function callsExportHistoryReportPostWithHttpInfo($call_direction = null, $from = null, $to = null)
    {
        $returnType = '\Smartcalls\Model\ExportHistoryReportResponseType';
        $request = $this->callsExportHistoryReportPostRequest($call_direction, $from, $to);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\ExportHistoryReportResponseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 0:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\ErrorType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation callsExportHistoryReportPostAsync
     *
     * 
     *
* @param  string $call_direction Call direction (&lt;b&gt;example:&lt;/b&gt; ‘call_direction&#x3D;outgoing’ or ‘call_direction&#x3D;incoming’ or ‘call_direction&#x3D;all’) (optional)
* @param  string $from Start date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $to End date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsExportHistoryReportPostAsync($call_direction = null, $from = null, $to = null)
    {
        return $this->callsExportHistoryReportPostAsyncWithHttpInfo($call_direction, $from, $to)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callsExportHistoryReportPostAsyncWithHttpInfo
     *
     * 
     *
* @param  string $call_direction Call direction (&lt;b&gt;example:&lt;/b&gt; ‘call_direction&#x3D;outgoing’ or ‘call_direction&#x3D;incoming’ or ‘call_direction&#x3D;all’) (optional)
* @param  string $from Start date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $to End date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsExportHistoryReportPostAsyncWithHttpInfo($call_direction = null, $from = null, $to = null)
    {
        $returnType = '\Smartcalls\Model\ExportHistoryReportResponseType';
        $request = $this->callsExportHistoryReportPostRequest($call_direction, $from, $to);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callsExportHistoryReportPost'
     *
* @param  string $call_direction Call direction (&lt;b&gt;example:&lt;/b&gt; ‘call_direction&#x3D;outgoing’ or ‘call_direction&#x3D;incoming’ or ‘call_direction&#x3D;all’) (optional)
* @param  string $from Start date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $to End date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callsExportHistoryReportPostRequest($call_direction = null, $from = null, $to = null)
    {
$resourcePath = '/calls/exportHistoryReport';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($call_direction !== null) {
            $queryParams['call_direction'] = ObjectSerializer::toQueryValue($call_direction);
        }
// query params
if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
// query params
if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callsGetHistoryReportStatusPost
*
* @param  int $report_id Report ID. ID can be retrieved via the **exportHistoryReport** method. (required)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Smartcalls\Model\GetHistoryReportStatusResponseType
     */
    public function callsGetHistoryReportStatusPost($report_id)
    {
        list($response) = $this->callsGetHistoryReportStatusPostWithHttpInfo($report_id);
        return $response;
    }

    /**
     * Operation callsGetHistoryReportStatusPostWithHttpInfo
*
* @param  int $report_id Report ID. ID can be retrieved via the **exportHistoryReport** method. (required)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Smartcalls\Model\GetHistoryReportStatusResponseType, HTTP status code, HTTP response headers (array of strings)
     */
    public function callsGetHistoryReportStatusPostWithHttpInfo($report_id)
    {
        $returnType = '\Smartcalls\Model\GetHistoryReportStatusResponseType';
        $request = $this->callsGetHistoryReportStatusPostRequest($report_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\GetHistoryReportStatusResponseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 0:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\ErrorType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation callsGetHistoryReportStatusPostAsync
     *
     * 
     *
* @param  int $report_id Report ID. ID can be retrieved via the **exportHistoryReport** method. (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsGetHistoryReportStatusPostAsync($report_id)
    {
        return $this->callsGetHistoryReportStatusPostAsyncWithHttpInfo($report_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callsGetHistoryReportStatusPostAsyncWithHttpInfo
     *
     * 
     *
* @param  int $report_id Report ID. ID can be retrieved via the **exportHistoryReport** method. (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsGetHistoryReportStatusPostAsyncWithHttpInfo($report_id)
    {
        $returnType = '\Smartcalls\Model\GetHistoryReportStatusResponseType';
        $request = $this->callsGetHistoryReportStatusPostRequest($report_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callsGetHistoryReportStatusPost'
     *
* @param  int $report_id Report ID. ID can be retrieved via the **exportHistoryReport** method. (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callsGetHistoryReportStatusPostRequest($report_id)
    {
// verify the required parameter 'report_id' is set
        if ($report_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $report_id when calling callsGetHistoryReportStatusPost'
            );
        }
$resourcePath = '/calls/getHistoryReportStatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($report_id !== null) {
            $queryParams['report_id'] = ObjectSerializer::toQueryValue($report_id);
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callsSearchCallsGet
*
* @param  string $call_direction Call direction (&lt;b&gt;example:&lt;/b&gt; ‘call_direction&#x3D;outgoing’ or ‘call_direction&#x3D;incoming’ or ‘call_direction&#x3D;all’) (optional)
* @param  int $scenario_id Scenario ID. ID can be retrieved via the **searchScenarios** method. (optional)
* @param  int $phone Phone number to filter. The response will include calls to the specified number only. Minimum number of characters is 3. (&lt;b&gt;example:&lt;/b&gt; ‘phone&#x3D;15417543010) (optional)
* @param  string $datetime_start Date start. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $datetime_end Date end. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Smartcalls\Model\SearchCallsResponseType
     */
    public function callsSearchCallsGet($call_direction = null, $scenario_id = null, $phone = null, $datetime_start = null, $datetime_end = null)
    {
        list($response) = $this->callsSearchCallsGetWithHttpInfo($call_direction, $scenario_id, $phone, $datetime_start, $datetime_end);
        return $response;
    }

    /**
     * Operation callsSearchCallsGetWithHttpInfo
*
* @param  string $call_direction Call direction (&lt;b&gt;example:&lt;/b&gt; ‘call_direction&#x3D;outgoing’ or ‘call_direction&#x3D;incoming’ or ‘call_direction&#x3D;all’) (optional)
* @param  int $scenario_id Scenario ID. ID can be retrieved via the **searchScenarios** method. (optional)
* @param  int $phone Phone number to filter. The response will include calls to the specified number only. Minimum number of characters is 3. (&lt;b&gt;example:&lt;/b&gt; ‘phone&#x3D;15417543010) (optional)
* @param  string $datetime_start Date start. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $datetime_end Date end. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
*
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Smartcalls\Model\SearchCallsResponseType, HTTP status code, HTTP response headers (array of strings)
     */
    public function callsSearchCallsGetWithHttpInfo($call_direction = null, $scenario_id = null, $phone = null, $datetime_start = null, $datetime_end = null)
    {
        $returnType = '\Smartcalls\Model\SearchCallsResponseType';
        $request = $this->callsSearchCallsGetRequest($call_direction, $scenario_id, $phone, $datetime_start, $datetime_end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\SearchCallsResponseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 0:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Smartcalls\Model\ErrorType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation callsSearchCallsGetAsync
     *
     * 
     *
* @param  string $call_direction Call direction (&lt;b&gt;example:&lt;/b&gt; ‘call_direction&#x3D;outgoing’ or ‘call_direction&#x3D;incoming’ or ‘call_direction&#x3D;all’) (optional)
* @param  int $scenario_id Scenario ID. ID can be retrieved via the **searchScenarios** method. (optional)
* @param  int $phone Phone number to filter. The response will include calls to the specified number only. Minimum number of characters is 3. (&lt;b&gt;example:&lt;/b&gt; ‘phone&#x3D;15417543010) (optional)
* @param  string $datetime_start Date start. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $datetime_end Date end. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsSearchCallsGetAsync($call_direction = null, $scenario_id = null, $phone = null, $datetime_start = null, $datetime_end = null)
    {
        return $this->callsSearchCallsGetAsyncWithHttpInfo($call_direction, $scenario_id, $phone, $datetime_start, $datetime_end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callsSearchCallsGetAsyncWithHttpInfo
     *
     * 
     *
* @param  string $call_direction Call direction (&lt;b&gt;example:&lt;/b&gt; ‘call_direction&#x3D;outgoing’ or ‘call_direction&#x3D;incoming’ or ‘call_direction&#x3D;all’) (optional)
* @param  int $scenario_id Scenario ID. ID can be retrieved via the **searchScenarios** method. (optional)
* @param  int $phone Phone number to filter. The response will include calls to the specified number only. Minimum number of characters is 3. (&lt;b&gt;example:&lt;/b&gt; ‘phone&#x3D;15417543010) (optional)
* @param  string $datetime_start Date start. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $datetime_end Date end. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsSearchCallsGetAsyncWithHttpInfo($call_direction = null, $scenario_id = null, $phone = null, $datetime_start = null, $datetime_end = null)
    {
        $returnType = '\Smartcalls\Model\SearchCallsResponseType';
        $request = $this->callsSearchCallsGetRequest($call_direction, $scenario_id, $phone, $datetime_start, $datetime_end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callsSearchCallsGet'
     *
* @param  string $call_direction Call direction (&lt;b&gt;example:&lt;/b&gt; ‘call_direction&#x3D;outgoing’ or ‘call_direction&#x3D;incoming’ or ‘call_direction&#x3D;all’) (optional)
* @param  int $scenario_id Scenario ID. ID can be retrieved via the **searchScenarios** method. (optional)
* @param  int $phone Phone number to filter. The response will include calls to the specified number only. Minimum number of characters is 3. (&lt;b&gt;example:&lt;/b&gt; ‘phone&#x3D;15417543010) (optional)
* @param  string $datetime_start Date start. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
* @param  string $datetime_end Date end. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callsSearchCallsGetRequest($call_direction = null, $scenario_id = null, $phone = null, $datetime_start = null, $datetime_end = null)
    {
$resourcePath = '/calls/searchCalls';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($call_direction !== null) {
            $queryParams['call_direction'] = ObjectSerializer::toQueryValue($call_direction);
        }
// query params
if ($scenario_id !== null) {
            $queryParams['scenario_id'] = ObjectSerializer::toQueryValue($scenario_id);
        }
// query params
if ($phone !== null) {
            $queryParams['phone'] = ObjectSerializer::toQueryValue($phone);
        }
// query params
if ($datetime_start !== null) {
            $queryParams['datetime_start'] = ObjectSerializer::toQueryValue($datetime_start);
        }
// query params
if ($datetime_end !== null) {
            $queryParams['datetime_end'] = ObjectSerializer::toQueryValue($datetime_end);
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

/**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
