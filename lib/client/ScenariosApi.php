<?php
/**
 * ScenariosApi
 * PHP version 5
 *
 * @category Class
 * @package  Smartcalls
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Voximplant Kit API Documentation
 *
 * <h1>Basic description</h1> <p>HTTP API is available via the <u>https://kit.voximplant.com/api/v3/<b>{method}</b></u> endpoint. To use the methods marked with the LOCK symbol, you need to generate an access_token via the <b>getAccessToken</b> method. Pass this access token to each HTTP API call.</p> <h1>Authentication</h1> <p>This API uses Custom Query Parameter for its authentication.</p> <p>The parameters that are needed to be sent for this type of authentication are as follows:</p> <ul>   <li><strong>access_token</strong></li>   <li><strong>domain</strong></li> </ul>
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.10
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Smartcalls\client;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Smartcalls\ApiException;
use Smartcalls\Configuration;
use Smartcalls\HeaderSelector;
use Smartcalls\ObjectSerializer;

/**
 * ScenariosApi Class Doc Comment
 *
 * @category Class
 * @package  Smartcalls
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ScenariosApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation scenarioGetScenarioVariablesPost
     *
     * @param  int $scenario_id scenario_id (optional)
     * @param  bool $required_only required_only (optional)
     *
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Smartcalls\Model\GetScenarioVariablesResponseType
     */
    public function scenarioGetScenarioVariablesPost($scenario_id = null, $required_only = null)
    {
        list($response) = $this->scenarioGetScenarioVariablesPostWithHttpInfo($scenario_id, $required_only);
        return $response;
    }

    /**
     * Operation scenarioGetScenarioVariablesPostWithHttpInfo
     *
     * @param  int $scenario_id (optional)
     * @param  bool $required_only (optional)
     *
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Smartcalls\Model\GetScenarioVariablesResponseType, HTTP status code, HTTP response headers (array of strings)
     */
    public function scenarioGetScenarioVariablesPostWithHttpInfo($scenario_id = null, $required_only = null)
    {
        $returnType = '\Smartcalls\Model\GetScenarioVariablesResponseType';
        $request = $this->scenarioGetScenarioVariablesPostRequest($scenario_id, $required_only);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Smartcalls\Model\GetScenarioVariablesResponseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Smartcalls\Model\ErrorType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scenarioGetScenarioVariablesPostAsync
     *
     * 
     *
     * @param  int $scenario_id (optional)
     * @param  bool $required_only (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scenarioGetScenarioVariablesPostAsync($scenario_id = null, $required_only = null)
    {
        return $this->scenarioGetScenarioVariablesPostAsyncWithHttpInfo($scenario_id, $required_only)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scenarioGetScenarioVariablesPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $scenario_id (optional)
     * @param  bool $required_only (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scenarioGetScenarioVariablesPostAsyncWithHttpInfo($scenario_id = null, $required_only = null)
    {
        $returnType = '\Smartcalls\Model\GetScenarioVariablesResponseType';
        $request = $this->scenarioGetScenarioVariablesPostRequest($scenario_id, $required_only);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scenarioGetScenarioVariablesPost'
     *
     * @param  int $scenario_id (optional)
     * @param  bool $required_only (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scenarioGetScenarioVariablesPostRequest($scenario_id = null, $required_only = null)
    {

        $resourcePath = '/scenario/getScenarioVariables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($scenario_id !== null) {
            $formParams['scenario_id'] = ObjectSerializer::toFormValue($scenario_id);
        }
        // form params
        if ($required_only !== null) {
            $formParams['required_only'] = ObjectSerializer::toFormValue($required_only);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scenarioRunScenarioPost
     *
     * @param  int $scenario_id scenario_id (required)
     * @param  int $phone phone (required)
     * @param  string $variables variables (required)
     * @param  int $phone_number_id phone_number_id (required)
     * @param  int $caller_id caller_id (required)
     *
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Smartcalls\Model\RunScenarioResponseType
     */
    public function scenarioRunScenarioPost($scenario_id, $phone, $variables, $phone_number_id, $caller_id)
    {
        list($response) = $this->scenarioRunScenarioPostWithHttpInfo($scenario_id, $phone, $variables, $phone_number_id, $caller_id);
        return $response;
    }

    /**
     * Operation scenarioRunScenarioPostWithHttpInfo
     *
     * @param  int $scenario_id (required)
     * @param  int $phone (required)
     * @param  string $variables (required)
     * @param  int $phone_number_id (required)
     * @param  int $caller_id (required)
     *
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Smartcalls\Model\RunScenarioResponseType, HTTP status code, HTTP response headers (array of strings)
     */
    public function scenarioRunScenarioPostWithHttpInfo($scenario_id, $phone, $variables, $phone_number_id, $caller_id)
    {
        $returnType = '\Smartcalls\Model\RunScenarioResponseType';
        $request = $this->scenarioRunScenarioPostRequest($scenario_id, $phone, $variables, $phone_number_id, $caller_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Smartcalls\Model\RunScenarioResponseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Smartcalls\Model\ErrorType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scenarioRunScenarioPostAsync
     *
     * 
     *
     * @param  int $scenario_id (required)
     * @param  int $phone (required)
     * @param  string $variables (required)
     * @param  int $phone_number_id (required)
     * @param  int $caller_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scenarioRunScenarioPostAsync($scenario_id, $phone, $variables, $phone_number_id, $caller_id)
    {
        return $this->scenarioRunScenarioPostAsyncWithHttpInfo($scenario_id, $phone, $variables, $phone_number_id, $caller_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scenarioRunScenarioPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $scenario_id (required)
     * @param  int $phone (required)
     * @param  string $variables (required)
     * @param  int $phone_number_id (required)
     * @param  int $caller_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scenarioRunScenarioPostAsyncWithHttpInfo($scenario_id, $phone, $variables, $phone_number_id, $caller_id)
    {
        $returnType = '\Smartcalls\Model\RunScenarioResponseType';
        $request = $this->scenarioRunScenarioPostRequest($scenario_id, $phone, $variables, $phone_number_id, $caller_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scenarioRunScenarioPost'
     *
     * @param  int $scenario_id (required)
     * @param  int $phone (required)
     * @param  string $variables (required)
     * @param  int $phone_number_id (required)
     * @param  int $caller_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scenarioRunScenarioPostRequest($scenario_id, $phone, $variables, $phone_number_id, $caller_id)
    {
        // verify the required parameter 'scenario_id' is set
        if ($scenario_id === null || (is_array($scenario_id) && count($scenario_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $scenario_id when calling scenarioRunScenarioPost'
            );
        }
        // verify the required parameter 'phone' is set
        if ($phone === null || (is_array($phone) && count($phone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone when calling scenarioRunScenarioPost'
            );
        }
        // verify the required parameter 'variables' is set
        if ($variables === null || (is_array($variables) && count($variables) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $variables when calling scenarioRunScenarioPost'
            );
        }
        // verify the required parameter 'phone_number_id' is set
        if ($phone_number_id === null || (is_array($phone_number_id) && count($phone_number_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number_id when calling scenarioRunScenarioPost'
            );
        }
        // verify the required parameter 'caller_id' is set
        if ($caller_id === null || (is_array($caller_id) && count($caller_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $caller_id when calling scenarioRunScenarioPost'
            );
        }

        $resourcePath = '/scenario/runScenario';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($scenario_id !== null) {
            $formParams['scenario_id'] = ObjectSerializer::toFormValue($scenario_id);
        }
        // form params
        if ($phone !== null) {
            $formParams['phone'] = ObjectSerializer::toFormValue($phone);
        }
        // form params
        if ($variables !== null) {
            $formParams['variables'] = ObjectSerializer::toFormValue($variables);
        }
        // form params
        if ($phone_number_id !== null) {
            $formParams['phone_number_id'] = ObjectSerializer::toFormValue($phone_number_id);
        }
        // form params
        if ($caller_id !== null) {
            $formParams['caller_id'] = ObjectSerializer::toFormValue($caller_id);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scenarioSearchScenariosGet
     *
     * @param  int $id Scenario ID. The ID can be retrieved via the **searchScenarios** method (optional)
     * @param  int $folder_id ID of the scenario&#x27;s folder (optional)
     * @param  int $scenario_type Scenario type to search for. (&lt;b&gt;example:&lt;/b&gt; scenario_type &#x3D; 1 — displays only outgoing call scenarios, scenario_type &#x3D; 2 — shows only incoming call scenarios) (optional)
     * @param  string $title Scenario title to search for (optional)
     * @param  int $with_campaigns Set &#x27;1&#x27; to include campaigns in the search results (optional)
     * @param  int $with_phones Set &#x27;1&#x27; to include phone numbers in the search results (optional)
     * @param  string $sort Sorting data by field(s), add &#x27;-&#x27; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-id’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $page Page to show as a response: the first one, second, etc. API methods return 20 records (one page) by default. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $per_page Number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     *
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Smartcalls\Model\SearchScenariosResponseType
     */
    public function scenarioSearchScenariosGet($id = null, $folder_id = null, $scenario_type = null, $title = null, $with_campaigns = null, $with_phones = null, $sort = null, $page = null, $per_page = null)
    {
        list($response) = $this->scenarioSearchScenariosGetWithHttpInfo($id, $folder_id, $scenario_type, $title, $with_campaigns, $with_phones, $sort, $page, $per_page);
        return $response;
    }

    /**
     * Operation scenarioSearchScenariosGetWithHttpInfo
     *
     * @param  int $id Scenario ID. The ID can be retrieved via the **searchScenarios** method (optional)
     * @param  int $folder_id ID of the scenario&#x27;s folder (optional)
     * @param  int $scenario_type Scenario type to search for. (&lt;b&gt;example:&lt;/b&gt; scenario_type &#x3D; 1 — displays only outgoing call scenarios, scenario_type &#x3D; 2 — shows only incoming call scenarios) (optional)
     * @param  string $title Scenario title to search for (optional)
     * @param  int $with_campaigns Set &#x27;1&#x27; to include campaigns in the search results (optional)
     * @param  int $with_phones Set &#x27;1&#x27; to include phone numbers in the search results (optional)
     * @param  string $sort Sorting data by field(s), add &#x27;-&#x27; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-id’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $page Page to show as a response: the first one, second, etc. API methods return 20 records (one page) by default. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $per_page Number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     *
     * @throws \Smartcalls\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Smartcalls\Model\SearchScenariosResponseType, HTTP status code, HTTP response headers (array of strings)
     */
    public function scenarioSearchScenariosGetWithHttpInfo($id = null, $folder_id = null, $scenario_type = null, $title = null, $with_campaigns = null, $with_phones = null, $sort = null, $page = null, $per_page = null)
    {
        $returnType = '\Smartcalls\Model\SearchScenariosResponseType';
        $request = $this->scenarioSearchScenariosGetRequest($id, $folder_id, $scenario_type, $title, $with_campaigns, $with_phones, $sort, $page, $per_page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Smartcalls\Model\SearchScenariosResponseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Smartcalls\Model\ErrorType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scenarioSearchScenariosGetAsync
     *
     * 
     *
     * @param  int $id Scenario ID. The ID can be retrieved via the **searchScenarios** method (optional)
     * @param  int $folder_id ID of the scenario&#x27;s folder (optional)
     * @param  int $scenario_type Scenario type to search for. (&lt;b&gt;example:&lt;/b&gt; scenario_type &#x3D; 1 — displays only outgoing call scenarios, scenario_type &#x3D; 2 — shows only incoming call scenarios) (optional)
     * @param  string $title Scenario title to search for (optional)
     * @param  int $with_campaigns Set &#x27;1&#x27; to include campaigns in the search results (optional)
     * @param  int $with_phones Set &#x27;1&#x27; to include phone numbers in the search results (optional)
     * @param  string $sort Sorting data by field(s), add &#x27;-&#x27; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-id’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $page Page to show as a response: the first one, second, etc. API methods return 20 records (one page) by default. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $per_page Number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scenarioSearchScenariosGetAsync($id = null, $folder_id = null, $scenario_type = null, $title = null, $with_campaigns = null, $with_phones = null, $sort = null, $page = null, $per_page = null)
    {
        return $this->scenarioSearchScenariosGetAsyncWithHttpInfo($id, $folder_id, $scenario_type, $title, $with_campaigns, $with_phones, $sort, $page, $per_page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scenarioSearchScenariosGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $id Scenario ID. The ID can be retrieved via the **searchScenarios** method (optional)
     * @param  int $folder_id ID of the scenario&#x27;s folder (optional)
     * @param  int $scenario_type Scenario type to search for. (&lt;b&gt;example:&lt;/b&gt; scenario_type &#x3D; 1 — displays only outgoing call scenarios, scenario_type &#x3D; 2 — shows only incoming call scenarios) (optional)
     * @param  string $title Scenario title to search for (optional)
     * @param  int $with_campaigns Set &#x27;1&#x27; to include campaigns in the search results (optional)
     * @param  int $with_phones Set &#x27;1&#x27; to include phone numbers in the search results (optional)
     * @param  string $sort Sorting data by field(s), add &#x27;-&#x27; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-id’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $page Page to show as a response: the first one, second, etc. API methods return 20 records (one page) by default. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $per_page Number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scenarioSearchScenariosGetAsyncWithHttpInfo($id = null, $folder_id = null, $scenario_type = null, $title = null, $with_campaigns = null, $with_phones = null, $sort = null, $page = null, $per_page = null)
    {
        $returnType = '\Smartcalls\Model\SearchScenariosResponseType';
        $request = $this->scenarioSearchScenariosGetRequest($id, $folder_id, $scenario_type, $title, $with_campaigns, $with_phones, $sort, $page, $per_page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scenarioSearchScenariosGet'
     *
     * @param  int $id Scenario ID. The ID can be retrieved via the **searchScenarios** method (optional)
     * @param  int $folder_id ID of the scenario&#x27;s folder (optional)
     * @param  int $scenario_type Scenario type to search for. (&lt;b&gt;example:&lt;/b&gt; scenario_type &#x3D; 1 — displays only outgoing call scenarios, scenario_type &#x3D; 2 — shows only incoming call scenarios) (optional)
     * @param  string $title Scenario title to search for (optional)
     * @param  int $with_campaigns Set &#x27;1&#x27; to include campaigns in the search results (optional)
     * @param  int $with_phones Set &#x27;1&#x27; to include phone numbers in the search results (optional)
     * @param  string $sort Sorting data by field(s), add &#x27;-&#x27; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-id’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $page Page to show as a response: the first one, second, etc. API methods return 20 records (one page) by default. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $per_page Number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scenarioSearchScenariosGetRequest($id = null, $folder_id = null, $scenario_type = null, $title = null, $with_campaigns = null, $with_phones = null, $sort = null, $page = null, $per_page = null)
    {

        $resourcePath = '/scenario/searchScenarios';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($folder_id !== null) {
            $queryParams['folder_id'] = ObjectSerializer::toQueryValue($folder_id);
        }
        // query params
        if ($scenario_type !== null) {
            $queryParams['scenario_type'] = ObjectSerializer::toQueryValue($scenario_type);
        }
        // query params
        if ($title !== null) {
            $queryParams['title'] = ObjectSerializer::toQueryValue($title);
        }
        // query params
        if ($with_campaigns !== null) {
            $queryParams['with_campaigns'] = ObjectSerializer::toQueryValue($with_campaigns);
        }
        // query params
        if ($with_phones !== null) {
            $queryParams['with_phones'] = ObjectSerializer::toQueryValue($with_phones);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per-page'] = ObjectSerializer::toQueryValue($per_page);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
